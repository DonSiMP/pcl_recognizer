#!/usr/bin/env python
PACKAGE = "pcl_recognizer"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("str_param",    str_t,       0, "A string parameter",  "Hello World")
gen.add("recalculate", bool_t,      0, "Temporary trigger",  True)
gen.add("only_last", bool_t,      0, "Temporary trigger",  False)
stopat_enum = gen.enum([ gen.const("Load",      int_t, 0, "Load and view only"),
                       gen.const("Denoise",     int_t, 1, "Play with denoising"),
                       gen.const("Normals",     int_t, 2, "Play with normals"),
                       gen.const("Keypoints",   int_t, 3, "Play with keypoints"),
                       gen.const("Descriptors", int_t, 4, "Play with descriptors"),
                       gen.const("Grouping",    int_t, 5, "Play with grouping"),
                       gen.const("All", int_t, 6, "Play with all")],
                     "Enum for selecting recalculation range")
gen.add("stop_at", int_t, 0, "Recalculate until selected step", 0, 0, 6, edit_method=stopat_enum)
gen.generate(PACKAGE, "pcl_recognizer", "Recognizer")

noise_gen = ParameterGenerator()
noise_gen.add("corr_distance",     double_t,    0, "Correspondence distance (default 0.25)", .25, 0, 1)
noise_gen.add("cluster_size",      double_t,    0, "Cluster size (default 0.01)", .01, -1., .7)
noise_gen.add("cluster_thresh",    double_t,    0, "Clustering threshold (default 5)", 5, -1, 98)
noise_gen.add("use_hough",    bool_t,      0, "Denoising method",  True)
noise_gen.generate(PACKAGE, "pcl_recognizer", "Denoise")

key_gen = ParameterGenerator()
method_enum = key_gen.enum([ key_gen.const("UniformSampling",      int_t, 0, "Uniform sampling"),
                         key_gen.const("ISS3D",     int_t, 1, "ISS3D"),
                         key_gen.const("Sift",     int_t, 2, "Sift"),
                         key_gen.const("H3DHarris", int_t, 3, "H3DHarris"),
                         key_gen.const("H3DTomasi", int_t, 4, "H3DTomasi"),
                         key_gen.const("H3DNoble",  int_t, 5, "H3DNoble"),
                         key_gen.const("H3DLowe",   int_t, 6, "H3DLowe"),
                         key_gen.const("H3DCurvature", int_t, 7, "H3DCurvature")],
                         "An enum to set keypoint method" )
key_gen.add("method", int_t, 0, "Keypoint method selection", 1, 0, 7, edit_method=method_enum)
key_gen.add("uniform_radius",     double_t,    0, "uniform sampling radius (default 0.01)",  .01,  0, .5)
key_gen.add("omp_threads",            int_t,   0, "Thread pool size (default 8)", 8, 0, 20)
key_gen.add("iss_non_max_radius", double_t,    0, "iss non max radius (default 0.012)", .012, 0, .05)
key_gen.add("iss_border_radius",  double_t,    0, "iss border radius (default 0.004)", .004, 0, .05)
key_gen.add("iss_salient_radius", double_t,    0, "iss salient radius (default 0.015)", .015, 0, .05)
key_gen.add("iss_use_resolution",   bool_t,    0, "Use cloud resolution instead of the above params",  True)
key_gen.add("sift_min_scale",     double_t,    0, "sift_min_scale (default 0.02)", 0.02, 0, .5)
key_gen.add("sift_nr_octaves",       int_t,    0, "sift_nr_octaves (default 5)", 5, 0, 100)
key_gen.add("sift_nr_scales_per_octave", int_t, 0, "sift_nr_scales_per_octave (default 3)", 3, 0, 100)
key_gen.add("sift_min_contrast",  double_t,    0, "sift_min_contrast (default 0.03)", 0.03, 0, .5)
key_gen.add("harris_use_nonmaxima", bool_t,    0, "harris_use_nonmaxima",  True)
key_gen.add("harris_radius",      double_t,    0, "harris radius (default 0.01)",  .01,  0, .5)
key_gen.add("harris_radius_search", double_t,  0, "harris search radius (default 0.01)",  .01,  0, .5)
key_gen.generate(PACKAGE, "pcl_recognizer", "Keypoint")

desc_gen = ParameterGenerator()
normal_method_enum = desc_gen.enum([ desc_gen.const("OMP",      int_t, 0, "OMP"),
                                desc_gen.const("INT",     int_t, 1, "Integral images"),
                                desc_gen.const("MLS",     int_t, 2, "MLS")],
                                 "An enum to set normals method" )
desc_gen.add("normal_method",   int_t,    0, "Normal method selection", 0, 0, 2, edit_method=normal_method_enum)
desc_gen.add("normal_ksize",    int_t,    0, "Normal k neighbourhood (default 0)", 0, 0, 100)
desc_gen.add("normal_rad",    double_t,   0, "Normal radius (default 0.03)", 0.03, 0, .5)
desc_gen.add("omp_threads",    int_t,   0, "Thread pool size (default 8)", 8, 0, 20)
int_method_enum = desc_gen.enum([ desc_gen.const("COVARIANCE_MATRIX",      int_t, 0, "COVARIANCE_MATRIX"),
                                desc_gen.const("AVERAGE_3D_GRADIENT",     int_t, 1, "AVERAGE_3D_GRADIENT"),
                                desc_gen.const("AVERAGE_DEPTH_CHANGE",     int_t, 2, "AVERAGE_DEPTH_CHANGE"),
                                desc_gen.const("SIMPLE_3D_GRADIENT",     int_t, 3, "SIMPLE_3D_GRADIENT")],
                                 "An enum to set Integral normals method" )
desc_gen.add("int_method",   int_t,    0, "Integral normal method selection", 0, 0, 4, edit_method=int_method_enum)
desc_gen.add("int_normal_smoothing", double_t,   0, "Integral image smoothing (default 10.0)", 10.0, 0, 100.0)
desc_gen.add("int_normal_maxdepth", double_t,   0, "Max depth change factor (default 0.02)", 0.02, 0, .5)
descr_method_enum = desc_gen.enum([ desc_gen.const("SHOT",      int_t, 0, "SHOT"),
                                    desc_gen.const("ColorSHOT", int_t, 1, "Color SHOT")],
                                    "An enum to set descr method" )
desc_gen.add("descr_method",   int_t,     0, "Descriptor method selection", 1, 0, 2, edit_method=descr_method_enum)
desc_gen.add("descr_rad",    double_t,    0, "Descriptor support radius (default 0.02)", .02, 0, .5)
desc_gen.add("rf_rad",       double_t,    0, "Reference frame radius (default 0.015)", .015, 0, .5)
desc_gen.generate(PACKAGE, "pcl_recognizer", "Descriptor")

match_gen = ParameterGenerator()
match_gen.add("corr_distance",     double_t,    0, "Correspondence distance (default 0.25)", .25, 0, 1)
match_gen.add("cluster_size",      double_t,    0, "Cluster size (default 0.01)", .01, -1., .7)
match_gen.add("cluster_thresh",    double_t,    0, "Clustering threshold (default 5)", 5, -1, 98)
match_gen.add("use_hough",    bool_t,      0, "Grouping method",  True)
match_gen.generate(PACKAGE, "pcl_recognizer", "Grouping")

view_gen = ParameterGenerator()
view_gen.add("input",   bool_t,   0, "View input cloud",  True)
view_gen.add("keypoints",   bool_t,   0, "View keypoints",  True)
view_gen.add("normals",   bool_t,   0, "View normals",  False)
view_gen.add("descriptors",   bool_t,   0, "View descriptors",  True)
view_gen.add("update",   bool_t,   0, "Temporary trigger",  True)
view_gen.add("view_clusters",   bool_t,   0, "Visualize only clustered correspondences",  True)

exit(view_gen.generate(PACKAGE, "pcl_recognizer", "Viewer"))


