#!/usr/bin/env python
PACKAGE = "pcl_recognizer"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("str_param",    str_t,       0, "A string parameter",  "Hello World")
gen.add("recalculate", bool_t,      0, "Temporary trigger",  True)
size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     "An enum to set size")
gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
gen.generate(PACKAGE, "pcl_recognizer", "Recognizer")

gen = ParameterGenerator()
method_enum = gen.enum([ gen.const("UniformSampling",      int_t, 0, "Uniform sampling"),
                         gen.const("ISS3D",     int_t, 1, "ISS3D")],
                         "An enum to set keypoint method" )
gen.add("method", int_t, 0, "Keypoint method selection", 1, 0, 1, edit_method=method_enum)
gen.add("uniform_radius",     double_t,    0, "Model uniform sampling radius (default 0.01)", .01, 0, .5)
gen.add("iss_non_max_radius",     double_t,    0, "Model uniform sampling radius (default 0.01)", .012, 0, .05)
gen.add("iss_normal_radius",     double_t,    0, "Model uniform sampling radius (default 0.01)", .008, 0, .05)
gen.add("iss_border_radius",     double_t,    0, "Model uniform sampling radius (default 0.01)", .004, 0, .05)
gen.add("iss_salient_radius",     double_t,    0, "Model uniform sampling radius (default 0.01)", .015, 0, .05)
gen.generate(PACKAGE, "pcl_recognizer", "Keypoint")

gen = ParameterGenerator()
normal_method_enum = gen.enum([ gen.const("OMP",      int_t, 0, "OMP"),
                                gen.const("INT",     int_t, 1, "Integral images"),
                                gen.const("MLS",     int_t, 2, "MLS")],
                                 "An enum to set normals method" )
gen.add("normal_method",   int_t,    0, "Normal method selection", 0, 0, 2, edit_method=normal_method_enum)
gen.add("normal_ksize",    int_t,    0, "Normal k neighbourhood (default 0)", 0, 0, 100)
gen.add("normal_rad",    double_t,   0, "Normal radius (default 0.03)", 0.03, 0, .5)
gen.add("normal_omp_threads",    double_t,   0, "Thread pool size (default 10)", 10, 0, 1000)
gen.add("normal_int_smoothing", double_t,   0, "Integral image smoothing (default 10.0)", 10.0, 0, 100.0)
gen.add("normal_int_maxdepth", double_t,   0, "Max depth change factor (default 0.02)", 0.02, 0, .5)
gen.add("descr_rad",    double_t,    0, "Descriptor radius (default 0.02)", .02, 0, .5)
gen.add("rf_rad",       double_t,    0, "Reference frame radius (default 0.015)", .015, 0, .5)
gen.generate(PACKAGE, "pcl_recognizer", "Descriptor")

gen = ParameterGenerator()
gen.add("cg_size",      double_t,    0, "Cluster size (default 0.01)", .01, 0, .5)
gen.add("cg_thresh",    double_t,    0, "Clustering threshold (default 5)", 5, 0, 100)
gen.add("use_hough",    bool_t,      0, "Grouping method",  False)
gen.generate(PACKAGE, "pcl_recognizer", "Grouping")

view_gen = ParameterGenerator()

view_gen.add("input",   bool_t,   0, "View input cloud",  True)
view_gen.add("keypoints",   bool_t,   0, "View keypoints",  True)
view_gen.add("normals",   bool_t,   0, "View normals",  True)
view_gen.add("descriptors",   bool_t,   0, "View descriptors",  True)
view_gen.add("update",   bool_t,   0, "Temporary trigger",  True)

exit(view_gen.generate(PACKAGE, "pcl_recognizer", "Viewer"))


